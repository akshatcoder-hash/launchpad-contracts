{
  "address": "0x0a53968104f0F6ea2C0d6CEBA460000E28943Ca3",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "ethPricePerToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minTokenBuy",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxTokenBuy",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "releaseDelay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingDuration",
              "type": "uint256"
            }
          ],
          "internalType": "struct MainLaunchpadInfo",
          "name": "_launchpadInfo",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "deployLaunchpad",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6fc9a7f3e9062b15de3440e5e5d67f4ad9c243647250d68727a656e010dea7ac",
  "receipt": {
    "to": null,
    "from": "0x7b7FEb0193d4f51B52f3C36615864c45DEBbdb97",
    "contractAddress": "0x0a53968104f0F6ea2C0d6CEBA460000E28943Ca3",
    "transactionIndex": 0,
    "gasUsed": "2392680",
    "logsBloom": "0x
    "blockHash": "0x9d2127c9f25ad84c93da8fad1a7ed89061c50f39fe0f5bd9931139829e582772",
    "transactionHash": "0x6fc9a7f3e9062b15de3440e5e5d67f4ad9c243647250d68727a656e010dea7ac",
    "logs": [],
    "blockNumber": 19193823,
    "cumulativeGasUsed": "2392680",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "11abffb32e7a00b8a03dc944e2aee65f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethPricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokenBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokenBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct MainLaunchpadInfo\",\"name\":\"_launchpadInfo\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"deployLaunchpad\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LaunchpadDeployer.sol\":\"LaunchpadDeployer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":3000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the Merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     *@dev The multiproof provided is not valid.\\n     */\\n    error MerkleProofInvalidMultiproof();\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Sorts the pair (a, b) and hashes the result.\\n     */\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    /**\\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\\n     */\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6400c4bee15052e043e5d10315135972529bd1c8012f43da494dc6b4f4661058\",\"license\":\"MIT\"},\"contracts/Launchpad.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./interfaces/ILaunchpadFactory.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {MainLaunchpadInfo} from \\\"./interfaces/ILaunchpadFactory.sol\\\";\\nimport \\\"./constants/Errors.sol\\\";\\n\\n\\n\\ncontract Launchpad {\\n    using SafeERC20 for IERC20;\\n    \\n    event TokensPurchased(address indexed _token, address indexed buyer, uint256 amount);\\n    event TokensClaimed(address indexed _token, address indexed buyer, uint256 amount);\\n    event ethPricePerTokenUpdated(address indexed _token, uint256 newEthPricePerToken);\\n    event WhitelistUpdated(uint256 wlBlockNumber, uint256 wlMinBalance, bytes32 wlRoot);\\n    event TokenHardCapUpdated(address indexed _token, uint256 newTokenHardCap);\\n    event OperatorTransferred(address indexed previousOperator, address indexed newOperator);\\n    event VestingDurationUpdated(uint256 newVestingDuration);\\n    modifier onlyOperator() {\\n        if (msg.sender != operator) revert OperatorZeroAddress();\\n        _;\\n    }\\n\\n    address public operator;\\n    string public name;\\n\\n    IERC20 public immutable token;\\n    uint256 public immutable decimals;\\n    uint256 public immutable tokenUnit;\\n\\n    address public immutable factory;\\n\\n    uint256 public ethPricePerToken;\\n    uint256 public tokenHardCap;\\n\\n    uint256 public minTokenBuy;\\n    uint256 public maxTokenBuy;\\n\\n    uint256 public startDate;\\n    uint256 public endDate;\\n\\n    uint256 public protocolFee;\\n    address public protocolFeeAddress;\\n\\n    uint256 public releaseDelay;\\n    uint256 public vestingDuration;\\n\\n    mapping (address => uint256) public purchasedAmount;\\n    mapping (address => uint256) public claimedAmount;\\n    uint256 public totalPurchasedAmount;\\n\\n    uint256 public wlBlockNumber;\\n    uint256 public wlMinBalance;\\n    bytes32 public wlRoot;\\n\\n    constructor(\\n        MainLaunchpadInfo memory _info,\\n        uint256 _protocolFee,\\n        address _protocolFeeAddress,\\n        address _operator,\\n        address _factory\\n    ) {\\n\\n        name = _info.name;\\n        factory = _factory;\\n\\n        if (_info.ethPricePerToken == 0) revert InvalidEthPrice();\\n        if (_info.minTokenBuy == 0) revert InvalidMinTokenBuy();\\n        if (_info.maxTokenBuy == 0) revert InvalidMaxTokenBuy();\\n        if (_info.startDate <= block.timestamp) revert InvalidStartDate();\\n        if (_info.endDate <= _info.startDate) revert InvalidEndDate();\\n        if (_operator == address(0)) revert ZeroAddress();\\n\\n        operator = _operator;\\n\\n        token = IERC20(_info.token);\\n        decimals = IERC20Metadata(_info.token).decimals();\\n        tokenUnit = 10**decimals;\\n\\n        ethPricePerToken = _info.ethPricePerToken;\\n        minTokenBuy = _info.minTokenBuy;\\n        maxTokenBuy = _info.maxTokenBuy;\\n\\n        startDate = _info.startDate;\\n        endDate = _info.endDate;\\n\\n        protocolFee = _protocolFee;\\n        protocolFeeAddress = _protocolFeeAddress;\\n\\n        releaseDelay = _info.releaseDelay;\\n        vestingDuration = _info.vestingDuration;\\n\\n    }\\n\\n    /**\\n     * @return true if the launchpad has started\\n     */\\n\\n    function isStarted() public view returns (bool) {\\n        return block.timestamp >= startDate;\\n    }\\n\\n    /**\\n     * @return true if the launchpad has ended\\n     */\\n\\n    function isEnded() public view returns (bool) {\\n        return block.timestamp >= endDate;\\n    }\\n\\n    /**\\n     * @return true if the tokens in the launchpad are claimable\\n     */\\n\\n    function isClaimable() public view returns (bool) {\\n        return block.timestamp >= endDate + releaseDelay;\\n    }\\n\\n    /**\\n     * \\n     * @param newOperator new operator address\\n     * This function is used to transfer ownership of the launchpad to another address.\\n     */\\n\\n    function transferOperatorOwnership(address newOperator) external onlyOperator {\\n        if (newOperator == address(0)) revert ZeroAddress();\\n        if (newOperator == operator) revert SameOperator();\\n\\n        emit OperatorTransferred(operator, newOperator);\\n        operator = newOperator;\\n    }\\n\\n    /**\\n     * @param _wlBlockNumber block number of the whitelist's snapshot\\n     * @param _wlMinBalance min balance threshold of the whitelist\\n     * @param _wlMinBalance merkle tree root of the whitelist\\n     *\\n     * When set, the buyTokens() will require a proof matching the buyer address and this root.\\n     */\\n    function updateWhitelist(uint256 _wlBlockNumber, uint256 _wlMinBalance, bytes32 _wlRoot) external onlyOperator {\\n        wlBlockNumber = _wlBlockNumber;\\n        wlMinBalance = _wlMinBalance;\\n        wlRoot = _wlRoot;\\n\\n        emit WhitelistUpdated(wlBlockNumber, wlMinBalance, wlRoot);\\n    }\\n\\n    /**\\n     * \\n     * @param _tokenHardCapIncrement amount of tokens to increase the hard cap by\\n     * This function is used to increase the hard cap of the launchpad.\\n     * The operator can increase the hard cap by any amount of tokens.\\n     */\\n\\n    function increaseHardCap(uint256 _tokenHardCapIncrement) external onlyOperator {\\n        if (_tokenHardCapIncrement == 0) revert InvalidTokenHardCapIncrement();\\n\\n        uint256 _feeAmount = _tokenHardCapIncrement * protocolFee / 10000;\\n        if (_feeAmount > 0) {\\n            token.safeTransferFrom(msg.sender, protocolFeeAddress, _feeAmount);\\n            _tokenHardCapIncrement -= _feeAmount;\\n        }\\n\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), _tokenHardCapIncrement);\\n        tokenHardCap += _tokenHardCapIncrement;\\n        emit TokenHardCapUpdated(address(token), tokenHardCap);\\n    }\\n\\n    /**\\n     * \\n     * @param _ethPricePerToken new ETH price per token\\n     * This function is used to change the ETH price per token.\\n     */\\n\\n    function updateEthPricePerToken(uint256 _ethPricePerToken) external onlyOperator {\\n        if (_ethPricePerToken == 0) revert InvalidEthPrice();\\n        emit ethPricePerTokenUpdated(address(token), _ethPricePerToken);\\n        ethPricePerToken = _ethPricePerToken;\\n    }\\n\\n    /**\\n     * \\n     * @param ethAmount amount of ETH\\n     * @return the amount of tokens that the user will receive for the given amount of ETH\\n     * This function is used to calculate the amount of tokens that the user will receive for the given amount of ETH.\\n     */\\n\\n    function ethToToken(uint256 ethAmount) public view returns (uint256) {\\n        return ethAmount * tokenUnit / ethPricePerToken;\\n    }\\n\\n    /**\\n     * @param proof the proof in case this launchpad has a whitelist, empty otherwise.\\n     * Allows the user to buy tokens during the launchpad.\\n     */\\n    function buyTokens(bytes32[] calldata proof) external payable {\\n        if (!isStarted()) revert NotStarted();\\n        if (isEnded()) revert Ended();\\n        if (msg.value == 0) revert InvalidBuyAmount();\\n\\n\\n        // check proof validity when a whitelist has been set.\\n        if (wlBlockNumber > 0 && !MerkleProof.verifyCalldata(\\n            proof, wlRoot, keccak256(bytes.concat(keccak256(abi.encode(msg.sender))))\\n        )) {\\n            revert InvalidWhitelistProof();\\n        }\\n\\n        uint256 _tokensAmount = ethToToken(msg.value);\\n        if (_tokensAmount < minTokenBuy) {\\n            revert AmountTooLow();\\n        }\\n\\n        if (purchasedAmount[msg.sender] + _tokensAmount > maxTokenBuy) {\\n            revert AmountExceedsMaxTokenAmount();\\n        }\\n\\n        if (totalPurchasedAmount + _tokensAmount > tokenHardCap) {\\n            revert AmountExceedsHardCap();\\n        }\\n\\n        purchasedAmount[msg.sender] += _tokensAmount;\\n        totalPurchasedAmount += _tokensAmount;\\n\\n        emit TokensPurchased(address(token), msg.sender, _tokensAmount);\\n    }\\n\\n    /**\\n     * \\n     * @param _address address of the user\\n     * @return the amount of tokens that the user can claim\\n     * This function is used to calculate the amount of tokens that the user can claim.\\n     * The tokens are released linearly over the vesting duration.\\n     */\\n\\n    function claimableAmount(address _address) public view returns (uint256) {\\n        if (!isClaimable()) {\\n            return 0;\\n        }\\n\\n        uint256 _purchasedAmount = purchasedAmount[_address];\\n        uint256 _claimedAmount = claimedAmount[_address];\\n        uint256 _netAmount = _purchasedAmount - _claimedAmount;\\n\\n        if (vestingDuration == 0 || (block.timestamp >= endDate + releaseDelay + vestingDuration)) {\\n            return _netAmount;\\n        }\\n\\n        uint256 _unlockedAmount = _purchasedAmount * (block.timestamp - endDate - releaseDelay) / vestingDuration;\\n\\n        if (_unlockedAmount > _purchasedAmount) {\\n            _unlockedAmount = _purchasedAmount;\\n        }\\n\\n        _unlockedAmount -= _claimedAmount;\\n        \\n        return _unlockedAmount;\\n    }\\n\\n    /**\\n     * Allows the user to claim their tokens after the launchpad has ended.\\n     * The tokens are released linearly over the vesting duration.\\n     */\\n\\n    function claimTokens() external {\\n        if (!isClaimable()) {\\n            revert NotClaimable();\\n        }\\n        if (purchasedAmount[msg.sender] == 0) {\\n            revert NoPurchasedTokens();\\n        }\\n\\n        uint256 _claimableAmount = claimableAmount(msg.sender);\\n        if (_claimableAmount == 0) {\\n            revert NoClaimableTokens();\\n        }\\n        claimedAmount[msg.sender] += _claimableAmount;\\n\\n        token.safeTransfer(msg.sender, _claimableAmount);\\n\\n        emit TokensClaimed(address(token), msg.sender, _claimableAmount);\\n    }\\n\\n    /**\\n     * Allows the operator to withdraw ETH after the launchpad has ended.\\n     */\\n\\n    function withdrawEth() external onlyOperator {\\n        if (!isEnded()) {\\n            revert NotEnded();\\n        }\\n        uint256 _balance = address(this).balance;\\n        if (_balance == 0) {\\n            revert NoBalanceToWithdraw();\\n        }\\n        (bool success, ) = payable(msg.sender).call{value: _balance}(\\\"\\\");\\n        if (!success) {\\n            revert EthereumTransferFailed();\\n        }\\n    }\\n\\n    /**\\n     * Allows the operator to withdraw any remaining tokens after the launchpad has ended.\\n     * This is useful in case the launchpad has not sold all the tokens.\\n     */\\n\\n    function withdrawTokens() external onlyOperator {\\n        if (!isEnded()) {\\n            revert NotEnded();\\n        }\\n        uint256 _balance = token.balanceOf(address(this));\\n        uint256 _purchasedAmount = totalPurchasedAmount;\\n\\n        if (_purchasedAmount > _balance) {\\n            _balance = 0;\\n        } else {\\n            _balance -= _purchasedAmount;\\n        }\\n\\n        if (_balance <= 0) {\\n            revert NoBalanceToWithdraw();\\n        }\\n        token.safeTransfer(msg.sender, _balance);\\n    }\\n\\n    /**\\n     * \\n     * @param _vestingDuration new vesting duration\\n     * This function is used to change the vesting duration of the launchpad.\\n     */\\n\\n    function setVestingDuration(uint256 _vestingDuration) external onlyOperator {\\n        require(!isEnded(), \\\"Launchpad: ENDED\\\");\\n        emit VestingDurationUpdated(_vestingDuration);\\n        vestingDuration = _vestingDuration;\\n    }\\n\\n    /**\\n     * \\n     * @param _name new name of the launchpad\\n     * This function is used to change the name of the launchpad.\\n     */\\n\\n    function setName(string memory _name) external onlyOperator {\\n        name = _name;\\n    }\\n\\n    /**\\n     * \\n     * @param _newOwner new owner address\\n     * This function is used to transfer ownership of purchased tokens to another address.\\n     * This is useful for external integrators suchs as Zappers,\\n     * which need to transfer ownership of purchased tokens to the user.\\n     */\\n\\n    function transferPurchasedOwnership(address _newOwner) external {\\n\\n        if (isEnded()) {\\n            revert Ended();\\n        }\\n\\n        uint256 _purchasedAmount = purchasedAmount[msg.sender];\\n        uint256 _newUserPurchaseAmount = purchasedAmount[_newOwner];\\n\\n        if (_newUserPurchaseAmount + _purchasedAmount > maxTokenBuy) {\\n            revert AmountExceedsMaxTokenAmount();\\n        }\\n\\n        purchasedAmount[msg.sender] = 0;\\n        purchasedAmount[_newOwner] += _purchasedAmount;\\n    }\\n}\\n\\n\",\"keccak256\":\"0xa0ce1e845ac146c33fbcc3138ce85c74181fed55ca290368cb5020524db8d099\",\"license\":\"MIT\"},\"contracts/LaunchpadDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {MainLaunchpadInfo} from \\\"./interfaces/ILaunchpadFactory.sol\\\";\\nimport {Launchpad} from \\\"./Launchpad.sol\\\";\\nimport {ILaunchpadFactory} from \\\"./interfaces/ILaunchpadFactory.sol\\\";\\n\\ncontract LaunchpadDeployer {\\n    function deployLaunchpad(\\n        MainLaunchpadInfo memory _launchpadInfo, \\n        address _operator\\n    ) \\n        external \\n        returns (address) \\n    {\\n        ILaunchpadFactory _factory = ILaunchpadFactory(msg.sender);\\n\\n        return address(\\n            new Launchpad(\\n                _launchpadInfo, \\n                _factory.protocolFee(), \\n                _factory.protocolFeeAddress(), \\n                _operator, \\n                msg.sender\\n            )\\n        );\\n    }\\n}\",\"keccak256\":\"0xc69382627a2b15f406d589217ae8c6df37f7d7334531c282bff7ccf48c0f6456\",\"license\":\"MIT\"},\"contracts/constants/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nerror ZeroAddress();\\nerror InvalidEthPrice();\\nerror InvalidMinTokenBuy();\\nerror InvalidMaxTokenBuy();\\nerror InvalidStartDate();\\nerror InvalidEndDate();\\nerror OperatorZeroAddress();\\nerror SameOperator();\\nerror InvalidTokenHardCapIncrement();\\nerror NotStarted();\\nerror Ended();\\nerror InvalidWhitelistProof();\\nerror InvalidBuyAmount();\\nerror AmountExceedsHardCap();\\nerror AmountTooLow();\\nerror AmountExceedsMaxTokenAmount();\\nerror NotClaimable();\\nerror NoPurchasedTokens();\\nerror NoClaimableTokens();\\nerror NotEnded();\\nerror NoBalanceToWithdraw();\\nerror EthereumTransferFailed();\\nerror InvalidProtocolFee();\",\"keccak256\":\"0x1acd1f67414e5c8b57f5be8039700ea5f326bc2e497b596be4dc73f55e8989f7\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ILaunchpadFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n\\nstruct MainLaunchpadInfo {\\n    string name;\\n    address token;\\n    uint256 ethPricePerToken;\\n    uint256 minTokenBuy;\\n    uint256 maxTokenBuy;\\n    uint256 startDate;\\n    uint256 endDate;\\n    uint256 releaseDelay;\\n    uint256 vestingDuration;\\n}\\n\\ninterface ILaunchpadFactory {\\n    function launchpads() external view returns (address[] memory);\\n    function trustedLaunchpads() external view returns (address[] memory);\\n    function protocolFeeAddress() external view returns (address);\\n    function protocolFee() external view returns (uint256);\\n}\",\"keccak256\":\"0x5ad216fc572a26df17660f4e7ca727ccbb325098e07f4d10b8ff03a53c34b74a\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612a9e806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200002e5760003560e01c8063eab5df1b1462000033575b600080fd5b6200004a62000044366004620002db565b62000073565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b600080339050838173ffffffffffffffffffffffffffffffffffffffff1663b0e21e8a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000c6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ec9190620003c2565b8273ffffffffffffffffffffffffffffffffffffffff1663cce516b76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000138573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200015e9190620003dc565b85336040516200016e90620001a4565b6200017e9594939291906200044b565b604051809103906000f0801580156200019b573d6000803e3d6000fd5b50949350505050565b612514806200055583390190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610120810167ffffffffffffffff81118282101715620002085762000208620001b2565b60405290565b600082601f8301126200022057600080fd5b813567ffffffffffffffff808211156200023e576200023e620001b2565b604051601f8301601f19908116603f01168101908282118183101715620002695762000269620001b2565b816040528381528660208588010111156200028357600080fd5b836020870160208301376000602085830101528094505050505092915050565b73ffffffffffffffffffffffffffffffffffffffff81168114620002c657600080fd5b50565b8035620002d681620002a3565b919050565b60008060408385031215620002ef57600080fd5b823567ffffffffffffffff808211156200030857600080fd5b9084019061012082870312156200031e57600080fd5b62000328620001e1565b8235828111156200033857600080fd5b62000346888286016200020e565b8252506200035760208401620002c9565b602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e082015261010091508183013582820152809450505050620003b960208401620002c9565b90509250929050565b600060208284031215620003d557600080fd5b5051919050565b600060208284031215620003ef57600080fd5b8151620003fc81620002a3565b9392505050565b6000815180845260005b818110156200042b576020818501810151868301820152016200040d565b506000602082860101526020601f19601f83011685010191505092915050565b60a08152600086516101208060a08501526200046c6101c085018362000403565b915060208901516200049660c086018273ffffffffffffffffffffffffffffffffffffffff169052565b50604089015160e08501526060890151610100818187015260808b01518387015260a08b015161014087015260c08b015161016087015260e08b0151610180870152808b01516101a08701525050508091505085602083015262000512604083018673ffffffffffffffffffffffffffffffffffffffff169052565b73ffffffffffffffffffffffffffffffffffffffff8416606083015273ffffffffffffffffffffffffffffffffffffffff83166080830152969550505050505056fe6101006040523480156200001257600080fd5b506040516200251438038062002514833981016040819052620000359162000368565b84516001906200004690826200050e565b506001600160a01b03811660e05260408501516000036200007a576040516359e3bc8d60e01b815260040160405180910390fd5b8460600151600003620000a0576040516318e3ae8560e31b815260040160405180910390fd5b8460800151600003620000c6576040516383f45e6160e01b815260040160405180910390fd5b428560a0015111620000eb57604051630bf784c760e01b815260040160405180910390fd5b8460a001518560c0015111620001145760405163398145cf60e11b815260040160405180910390fd5b6001600160a01b0382166200013c5760405163d92e233d60e01b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155602086810180518316608052516040805163313ce56760e01b81529051919093169263313ce5679260048083019391928290030181865afa158015620001a6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001cc9190620005da565b60ff1660a0819052620001e190600a6200071b565b60c090815260408601516002556060860151600455608086015160055560a08601516006558501516007555050600891909155600980546001600160a01b0319166001600160a01b0390921691909117905560e0810151600a556101000151600b5562000729565b634e487b7160e01b600052604160045260246000fd5b60405161012081016001600160401b038111828210171562000285576200028562000249565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620002b657620002b662000249565b604052919050565b600082601f830112620002d057600080fd5b81516001600160401b03811115620002ec57620002ec62000249565b602062000302601f8301601f191682016200028b565b82815285828487010111156200031757600080fd5b60005b83811015620003375785810183015182820184015282016200031a565b506000928101909101919091529392505050565b80516001600160a01b03811681146200036357600080fd5b919050565b600080600080600060a086880312156200038157600080fd5b85516001600160401b03808211156200039957600080fd5b90870190610120828a031215620003af57600080fd5b620003b96200025f565b825182811115620003c957600080fd5b620003d78b828601620002be565b825250620003e8602084016200034b565b602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e0820152610100915081830151828201528097505050506020860151935062000451604087016200034b565b925062000461606087016200034b565b915062000471608087016200034b565b90509295509295909350565b600181811c908216806200049257607f821691505b602082108103620004b357634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000509576000816000526020600020601f850160051c81016020861015620004e45750805b601f850160051c820191505b818110156200050557828155600101620004f0565b5050505b505050565b81516001600160401b038111156200052a576200052a62000249565b62000542816200053b84546200047d565b84620004b9565b602080601f8311600181146200057a5760008415620005615750858301515b600019600386901b1c1916600185901b17855562000505565b600085815260208120601f198616915b82811015620005ab578886015182559484019460019091019084016200058a565b5085821015620005ca5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215620005ed57600080fd5b815160ff81168114620005ff57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156200065d57816000190482111562000641576200064162000606565b808516156200064f57918102915b93841c939080029062000621565b509250929050565b600082620006765750600162000715565b81620006855750600062000715565b81600181146200069e5760028114620006a957620006c9565b600191505062000715565b60ff841115620006bd57620006bd62000606565b50506001821b62000715565b5060208310610133831016604e8410600b8410161715620006ee575081810a62000715565b620006fa83836200061c565b806000190482111562000711576200071162000606565b0290505b92915050565b6000620005ff838362000665565b60805160a05160c05160e051611d6b620007a9600039600061063a0152600081816106ce01526115a80152600061038c01526000818161070201528181610b8501528181610bb601528181610e1801528181610ef601528181610f880152818161138f0152818161147d015281816114c201526115140152611d6b6000f3fe6080604052600436106102855760003560e01c80638988504911610153578063bc402f8f116100cb578063c47f00271161007f578063e27a248911610064578063e27a24891461069c578063e93c980d146106bc578063fc0c546a146106f057600080fd5b8063c47f00271461065c578063cce516b71461067c57600080fd5b8063c24a0f8b116100b0578063c24a0f8b146105fc578063c3a4714914610612578063c45a01551461062857600080fd5b8063bc402f8f146105d0578063bedac100146105e657600080fd5b8063a4fd6f5611610122578063afe07ce411610107578063afe07ce414610584578063b0e21e8a1461059a578063b8e0d08d146105b057600080fd5b8063a4fd6f5614610559578063ab98089f1461057157600080fd5b806389885049146104ef5780638d8f2adb1461050f578063964d86c914610524578063a0ef91df1461054457600080fd5b806344c4dcc1116102015780636ccf95fc116101b55780637195bf231161019a5780637195bf23146104ae57806374478bb3146104c457806382c30987146104d957600080fd5b80636ccf95fc146104825780636fb64e291461049857600080fd5b8063544736e6116101e6578063544736e614610406578063570ca7351461042a5780635ea5c1691461046257600080fd5b806344c4dcc1146103c457806348c54b9d146103f157600080fd5b80631514617e116102585780633044e2771161023d5780633044e2771461035a578063313ce5671461037a57806339688256146103ae57600080fd5b80631514617e146103245780632ad50ce91461033a57600080fd5b806304e869031461028a57806306fdde03146102ca5780630b97bc86146102ec5780630ffbdcaa14610302575b600080fd5b34801561029657600080fd5b506102b76102a5366004611908565b600d6020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156102d657600080fd5b506102df610724565b6040516102c19190611955565b3480156102f857600080fd5b506102b760065481565b34801561030e57600080fd5b5061032261031d366004611988565b6107b2565b005b34801561033057600080fd5b506102b7600b5481565b34801561034657600080fd5b50610322610355366004611908565b610885565b34801561036657600080fd5b50610322610375366004611908565b610960565b34801561038657600080fd5b506102b77f000000000000000000000000000000000000000000000000000000000000000081565b3480156103ba57600080fd5b506102b760035481565b3480156103d057600080fd5b506102b76103df366004611908565b600c6020526000908152604090205481565b3480156103fd57600080fd5b50610322610a86565b34801561041257600080fd5b506006544210155b60405190151581526020016102c1565b34801561043657600080fd5b5060005461044a906001600160a01b031681565b6040516001600160a01b0390911681526020016102c1565b34801561046e57600080fd5b5061032261047d3660046119a1565b610c0f565b34801561048e57600080fd5b506102b760025481565b3480156104a457600080fd5b506102b760105481565b3480156104ba57600080fd5b506102b7600a5481565b3480156104d057600080fd5b5061041a610c8f565b3480156104e557600080fd5b506102b760115481565b3480156104fb57600080fd5b506102b761050a366004611908565b610ca9565b34801561051b57600080fd5b50610322610d80565b34801561053057600080fd5b5061032261053f366004611988565b610f21565b34801561055057600080fd5b50610322610fee565b34801561056557600080fd5b5060075442101561041a565b61032261057f3660046119cd565b611113565b34801561059057600080fd5b506102b760055481565b3480156105a657600080fd5b506102b760085481565b3480156105bc57600080fd5b506103226105cb366004611988565b6113e2565b3480156105dc57600080fd5b506102b7600f5481565b3480156105f257600080fd5b506102b7600e5481565b34801561060857600080fd5b506102b760075481565b34801561061e57600080fd5b506102b760045481565b34801561063457600080fd5b5061044a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561066857600080fd5b50610322610677366004611a58565b611566565b34801561068857600080fd5b5060095461044a906001600160a01b031681565b3480156106a857600080fd5b506102b76106b7366004611988565b61159d565b3480156106c857600080fd5b506102b77f000000000000000000000000000000000000000000000000000000000000000081565b3480156106fc57600080fd5b5061044a7f000000000000000000000000000000000000000000000000000000000000000081565b6001805461073190611b09565b80601f016020809104026020016040519081016040528092919081815260200182805461075d90611b09565b80156107aa5780601f1061077f576101008083540402835291602001916107aa565b820191906000526020600020905b81548152906001019060200180831161078d57829003601f168201915b505050505081565b6000546001600160a01b031633146107dd5760405163b2e661d760e01b815260040160405180910390fd5b600754421061084d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4c61756e63687061643a20454e4445440000000000000000000000000000000060448201526064015b60405180910390fd5b6040518181527fe41050a384bb8564f1f0f7deee716caf1c0a20a94b147933a4a217427fceaace9060200160405180910390a1600b55565b60075442106108c0576040517f477383f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152600c6020526040808220546001600160a01b03841683529120546005546108ed8383611b59565b1115610925576040517f6a93ecd900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152600c60205260408082208290556001600160a01b038516825281208054849290610956908490611b59565b9091555050505050565b6000546001600160a01b0316331461098b5760405163b2e661d760e01b815260040160405180910390fd5b6001600160a01b0381166109cb576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546001600160a01b0390811690821603610a13576040517f0d7ba3a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080546040516001600160a01b03808516939216917f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed91a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610a8e610c8f565b610ac4576040517f6247a84e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152600c60205260408120549003610b0c576040517f5dd9982e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610b1733610ca9565b905080600003610b53576040517fb8d485a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152600d602052604081208054839290610b72908490611b59565b90915550610bac90506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633836115dd565b60405181815233907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316907fa86305abc2db271df4609aa86a8d044bc11fb36939841bfdad6c1ab2b26e94719060200160405180910390a350565b6000546001600160a01b03163314610c3a5760405163b2e661d760e01b815260040160405180910390fd5b600f8390556010829055601181905560408051848152602081018490529081018290527f48a56cad4f4700b5cec54bb868120f657d71333d300cfbdd06d52c0920f21d039060600160405180910390a1505050565b6000600a54600754610ca19190611b59565b421015905090565b6000610cb3610c8f565b610cbf57506000919050565b6001600160a01b0382166000908152600c6020908152604080832054600d9092528220549091610cef8284611b6c565b9050600b5460001480610d1e5750600b54600a54600754610d109190611b59565b610d1a9190611b59565b4210155b15610d2b57949350505050565b6000600b54600a5460075442610d419190611b6c565b610d4b9190611b6c565b610d559086611b7f565b610d5f9190611b96565b905083811115610d6c5750825b610d768382611b6c565b9695505050505050565b6000546001600160a01b03163314610dab5760405163b2e661d760e01b815260040160405180910390fd5b600754421015610de7576040517fd3018d1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610e67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8b9190611bb8565b600e5490915081811115610ea25760009150610eaf565b610eac8183611b6c565b91505b60008211610ee9576040517fbbd8170800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f1d6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633846115dd565b5050565b6000546001600160a01b03163314610f4c5760405163b2e661d760e01b815260040160405180910390fd5b80600003610f86576040517f59e3bc8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f5a618a77896880d7865b0093eac54a86e9bad19c67a4870cf1bf46420c041d8782604051610fe191815260200190565b60405180910390a2600255565b6000546001600160a01b031633146110195760405163b2e661d760e01b815260040160405180910390fd5b600754421015611055576040517fd3018d1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b476000819003611091576040517fbbd8170800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604051600090339083908381818185875af1925050503d80600081146110d3576040519150601f19603f3d011682016040523d82523d6000602084013e6110d8565b606091505b5050905080610f1d576040517f53a7326b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60065442101561114f576040517f6f312cbd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600754421061118a576040517f477383f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b346000036111c4576040517f384dbe5a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600f5411801561122157506011546040805133602082015261121f92859285920160408051601f198184030181528282528051602091820120908301520160405160208183030381529060405280519060200120611656565b155b15611258576040517fa26e706500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006112633461159d565b90506004548110156112a1576040517f1fbaba3500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600554336000908152600c60205260409020546112bf908390611b59565b11156112f7576040517f6a93ecd900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60035481600e546113089190611b59565b1115611340576040517fc11132a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152600c60205260408120805483929061135f908490611b59565b9250508190555080600e60008282546113789190611b59565b909155505060405181815233906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016907ff9b4eb3e43eebbf559e9b96ceff1c786a7edab2938c7f5f80678197c2e0edba59060200160405180910390a3505050565b6000546001600160a01b0316331461140d5760405163b2e661d760e01b815260040160405180910390fd5b80600003611447576040517fe690acde00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006127106008548361145a9190611b7f565b6114649190611b96565b905080156114b5576009546114a8906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116913391168461166e565b6114b28183611b6c565b91505b6114ea6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308561166e565b81600360008282546114fc9190611b59565b90915550506003546040519081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016907fa3b7fca9670bb037363dfd4e1a7f841adac6df1f3ce5a23a57fedce69b400f1c9060200160405180910390a25050565b6000546001600160a01b031633146115915760405163b2e661d760e01b815260040160405180910390fd5b6001610f1d8282611c21565b6002546000906115cd7f000000000000000000000000000000000000000000000000000000000000000084611b7f565b6115d79190611b96565b92915050565b6040516001600160a01b0383811660248301526044820183905261165191859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506116ad565b505050565b600082611664868685611729565b1495945050505050565b6040516001600160a01b0384811660248301528381166044830152606482018390526116a79186918216906323b872dd9060840161160a565b50505050565b60006116c26001600160a01b0384168361176d565b905080516000141580156116e75750808060200190518101906116e59190611ce1565b155b15611651576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610844565b600081815b84811015611762576117588287878481811061174c5761174c611d03565b9050602002013561177b565b915060010161172e565b5090505b9392505050565b6060611766838360006117aa565b6000818310611797576000828152602084905260409020611766565b6000838152602083905260409020611766565b6060814710156117e8576040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152602401610844565b600080856001600160a01b031684866040516118049190611d19565b60006040518083038185875af1925050503d8060008114611841576040519150601f19603f3d011682016040523d82523d6000602084013e611846565b606091505b5091509150610d7686838360608261186657611861826118c6565b611766565b815115801561187d57506001600160a01b0384163b155b156118bf576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610844565b5080611766565b8051156118d65780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006020828403121561191a57600080fd5b81356001600160a01b038116811461176657600080fd5b60005b8381101561194c578181015183820152602001611934565b50506000910152565b6020815260008251806020840152611974816040850160208701611931565b601f01601f19169190910160400192915050565b60006020828403121561199a57600080fd5b5035919050565b6000806000606084860312156119b657600080fd5b505081359360208301359350604090920135919050565b600080602083850312156119e057600080fd5b823567ffffffffffffffff808211156119f857600080fd5b818501915085601f830112611a0c57600080fd5b813581811115611a1b57600080fd5b8660208260051b8501011115611a3057600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215611a6a57600080fd5b813567ffffffffffffffff80821115611a8257600080fd5b818401915084601f830112611a9657600080fd5b813581811115611aa857611aa8611a42565b604051601f8201601f19908116603f01168101908382118183101715611ad057611ad0611a42565b81604052828152876020848701011115611ae957600080fd5b826020860160208301376000928101602001929092525095945050505050565b600181811c90821680611b1d57607f821691505b602082108103611b3d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156115d7576115d7611b43565b818103818111156115d7576115d7611b43565b80820281158282048414176115d7576115d7611b43565b600082611bb357634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611bca57600080fd5b5051919050565b601f821115611651576000816000526020600020601f850160051c81016020861015611bfa5750805b601f850160051c820191505b81811015611c1957828155600101611c06565b505050505050565b815167ffffffffffffffff811115611c3b57611c3b611a42565b611c4f81611c498454611b09565b84611bd1565b602080601f831160018114611c845760008415611c6c5750858301515b600019600386901b1c1916600185901b178555611c19565b600085815260208120601f198616915b82811015611cb357888601518255948401946001909101908401611c94565b5085821015611cd15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215611cf357600080fd5b8151801515811461176657600080fd5b634e487b7160e01b600052603260045260246000fd5b60008251611d2b818460208701611931565b919091019291505056fea2646970667358221220719fbe9d6399073574d8257a9620f05f0a414729fea970933747a995c1641e3564736f6c63430008170033a26469706673582212205f22d2fb8ab96eca41b5665de3837693ae9cfe52ba52bc1a73ca7d2b45ecf75064736f6c63430008170033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200002e5760003560e01c8063eab5df1b1462000033575b600080fd5b6200004a62000044366004620002db565b62000073565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b600080339050838173ffffffffffffffffffffffffffffffffffffffff1663b0e21e8a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000c6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ec9190620003c2565b8273ffffffffffffffffffffffffffffffffffffffff1663cce516b76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000138573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200015e9190620003dc565b85336040516200016e90620001a4565b6200017e9594939291906200044b565b604051809103906000f0801580156200019b573d6000803e3d6000fd5b50949350505050565b612514806200055583390190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610120810167ffffffffffffffff81118282101715620002085762000208620001b2565b60405290565b600082601f8301126200022057600080fd5b813567ffffffffffffffff808211156200023e576200023e620001b2565b604051601f8301601f19908116603f01168101908282118183101715620002695762000269620001b2565b816040528381528660208588010111156200028357600080fd5b836020870160208301376000602085830101528094505050505092915050565b73ffffffffffffffffffffffffffffffffffffffff81168114620002c657600080fd5b50565b8035620002d681620002a3565b919050565b60008060408385031215620002ef57600080fd5b823567ffffffffffffffff808211156200030857600080fd5b9084019061012082870312156200031e57600080fd5b62000328620001e1565b8235828111156200033857600080fd5b62000346888286016200020e565b8252506200035760208401620002c9565b602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e082015261010091508183013582820152809450505050620003b960208401620002c9565b90509250929050565b600060208284031215620003d557600080fd5b5051919050565b600060208284031215620003ef57600080fd5b8151620003fc81620002a3565b9392505050565b6000815180845260005b818110156200042b576020818501810151868301820152016200040d565b506000602082860101526020601f19601f83011685010191505092915050565b60a08152600086516101208060a08501526200046c6101c085018362000403565b915060208901516200049660c086018273ffffffffffffffffffffffffffffffffffffffff169052565b50604089015160e08501526060890151610100818187015260808b01518387015260a08b015161014087015260c08b015161016087015260e08b0151610180870152808b01516101a08701525050508091505085602083015262000512604083018673ffffffffffffffffffffffffffffffffffffffff169052565b73ffffffffffffffffffffffffffffffffffffffff8416606083015273ffffffffffffffffffffffffffffffffffffffff83166080830152969550505050505056fe6101006040523480156200001257600080fd5b506040516200251438038062002514833981016040819052620000359162000368565b84516001906200004690826200050e565b506001600160a01b03811660e05260408501516000036200007a576040516359e3bc8d60e01b815260040160405180910390fd5b8460600151600003620000a0576040516318e3ae8560e31b815260040160405180910390fd5b8460800151600003620000c6576040516383f45e6160e01b815260040160405180910390fd5b428560a0015111620000eb57604051630bf784c760e01b815260040160405180910390fd5b8460a001518560c0015111620001145760405163398145cf60e11b815260040160405180910390fd5b6001600160a01b0382166200013c5760405163d92e233d60e01b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155602086810180518316608052516040805163313ce56760e01b81529051919093169263313ce5679260048083019391928290030181865afa158015620001a6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001cc9190620005da565b60ff1660a0819052620001e190600a6200071b565b60c090815260408601516002556060860151600455608086015160055560a08601516006558501516007555050600891909155600980546001600160a01b0319166001600160a01b0390921691909117905560e0810151600a556101000151600b5562000729565b634e487b7160e01b600052604160045260246000fd5b60405161012081016001600160401b038111828210171562000285576200028562000249565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620002b657620002b662000249565b604052919050565b600082601f830112620002d057600080fd5b81516001600160401b03811115620002ec57620002ec62000249565b602062000302601f8301601f191682016200028b565b82815285828487010111156200031757600080fd5b60005b83811015620003375785810183015182820184015282016200031a565b506000928101909101919091529392505050565b80516001600160a01b03811681146200036357600080fd5b919050565b600080600080600060a086880312156200038157600080fd5b85516001600160401b03808211156200039957600080fd5b90870190610120828a031215620003af57600080fd5b620003b96200025f565b825182811115620003c957600080fd5b620003d78b828601620002be565b825250620003e8602084016200034b565b602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e0820152610100915081830151828201528097505050506020860151935062000451604087016200034b565b925062000461606087016200034b565b915062000471608087016200034b565b90509295509295909350565b600181811c908216806200049257607f821691505b602082108103620004b357634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000509576000816000526020600020601f850160051c81016020861015620004e45750805b601f850160051c820191505b818110156200050557828155600101620004f0565b5050505b505050565b81516001600160401b038111156200052a576200052a62000249565b62000542816200053b84546200047d565b84620004b9565b602080601f8311600181146200057a5760008415620005615750858301515b600019600386901b1c1916600185901b17855562000505565b600085815260208120601f198616915b82811015620005ab578886015182559484019460019091019084016200058a565b5085821015620005ca5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215620005ed57600080fd5b815160ff81168114620005ff57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156200065d57816000190482111562000641576200064162000606565b808516156200064f57918102915b93841c939080029062000621565b509250929050565b600082620006765750600162000715565b81620006855750600062000715565b81600181146200069e5760028114620006a957620006c9565b600191505062000715565b60ff841115620006bd57620006bd62000606565b50506001821b62000715565b5060208310610133831016604e8410600b8410161715620006ee575081810a62000715565b620006fa83836200061c565b806000190482111562000711576200071162000606565b0290505b92915050565b6000620005ff838362000665565b60805160a05160c05160e051611d6b620007a9600039600061063a0152600081816106ce01526115a80152600061038c01526000818161070201528181610b8501528181610bb601528181610e1801528181610ef601528181610f880152818161138f0152818161147d015281816114c201526115140152611d6b6000f3fe6080604052600436106102855760003560e01c80638988504911610153578063bc402f8f116100cb578063c47f00271161007f578063e27a248911610064578063e27a24891461069c578063e93c980d146106bc578063fc0c546a146106f057600080fd5b8063c47f00271461065c578063cce516b71461067c57600080fd5b8063c24a0f8b116100b0578063c24a0f8b146105fc578063c3a4714914610612578063c45a01551461062857600080fd5b8063bc402f8f146105d0578063bedac100146105e657600080fd5b8063a4fd6f5611610122578063afe07ce411610107578063afe07ce414610584578063b0e21e8a1461059a578063b8e0d08d146105b057600080fd5b8063a4fd6f5614610559578063ab98089f1461057157600080fd5b806389885049146104ef5780638d8f2adb1461050f578063964d86c914610524578063a0ef91df1461054457600080fd5b806344c4dcc1116102015780636ccf95fc116101b55780637195bf231161019a5780637195bf23146104ae57806374478bb3146104c457806382c30987146104d957600080fd5b80636ccf95fc146104825780636fb64e291461049857600080fd5b8063544736e6116101e6578063544736e614610406578063570ca7351461042a5780635ea5c1691461046257600080fd5b806344c4dcc1146103c457806348c54b9d146103f157600080fd5b80631514617e116102585780633044e2771161023d5780633044e2771461035a578063313ce5671461037a57806339688256146103ae57600080fd5b80631514617e146103245780632ad50ce91461033a57600080fd5b806304e869031461028a57806306fdde03146102ca5780630b97bc86146102ec5780630ffbdcaa14610302575b600080fd5b34801561029657600080fd5b506102b76102a5366004611908565b600d6020526000908152604090205481565b6040519081526020015b60405180910390f35b3480156102d657600080fd5b506102df610724565b6040516102c19190611955565b3480156102f857600080fd5b506102b760065481565b34801561030e57600080fd5b5061032261031d366004611988565b6107b2565b005b34801561033057600080fd5b506102b7600b5481565b34801561034657600080fd5b50610322610355366004611908565b610885565b34801561036657600080fd5b50610322610375366004611908565b610960565b34801561038657600080fd5b506102b77f000000000000000000000000000000000000000000000000000000000000000081565b3480156103ba57600080fd5b506102b760035481565b3480156103d057600080fd5b506102b76103df366004611908565b600c6020526000908152604090205481565b3480156103fd57600080fd5b50610322610a86565b34801561041257600080fd5b506006544210155b60405190151581526020016102c1565b34801561043657600080fd5b5060005461044a906001600160a01b031681565b6040516001600160a01b0390911681526020016102c1565b34801561046e57600080fd5b5061032261047d3660046119a1565b610c0f565b34801561048e57600080fd5b506102b760025481565b3480156104a457600080fd5b506102b760105481565b3480156104ba57600080fd5b506102b7600a5481565b3480156104d057600080fd5b5061041a610c8f565b3480156104e557600080fd5b506102b760115481565b3480156104fb57600080fd5b506102b761050a366004611908565b610ca9565b34801561051b57600080fd5b50610322610d80565b34801561053057600080fd5b5061032261053f366004611988565b610f21565b34801561055057600080fd5b50610322610fee565b34801561056557600080fd5b5060075442101561041a565b61032261057f3660046119cd565b611113565b34801561059057600080fd5b506102b760055481565b3480156105a657600080fd5b506102b760085481565b3480156105bc57600080fd5b506103226105cb366004611988565b6113e2565b3480156105dc57600080fd5b506102b7600f5481565b3480156105f257600080fd5b506102b7600e5481565b34801561060857600080fd5b506102b760075481565b34801561061e57600080fd5b506102b760045481565b34801561063457600080fd5b5061044a7f000000000000000000000000000000000000000000000000000000000000000081565b34801561066857600080fd5b50610322610677366004611a58565b611566565b34801561068857600080fd5b5060095461044a906001600160a01b031681565b3480156106a857600080fd5b506102b76106b7366004611988565b61159d565b3480156106c857600080fd5b506102b77f000000000000000000000000000000000000000000000000000000000000000081565b3480156106fc57600080fd5b5061044a7f000000000000000000000000000000000000000000000000000000000000000081565b6001805461073190611b09565b80601f016020809104026020016040519081016040528092919081815260200182805461075d90611b09565b80156107aa5780601f1061077f576101008083540402835291602001916107aa565b820191906000526020600020905b81548152906001019060200180831161078d57829003601f168201915b505050505081565b6000546001600160a01b031633146107dd5760405163b2e661d760e01b815260040160405180910390fd5b600754421061084d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4c61756e63687061643a20454e4445440000000000000000000000000000000060448201526064015b60405180910390fd5b6040518181527fe41050a384bb8564f1f0f7deee716caf1c0a20a94b147933a4a217427fceaace9060200160405180910390a1600b55565b60075442106108c0576040517f477383f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152600c6020526040808220546001600160a01b03841683529120546005546108ed8383611b59565b1115610925576040517f6a93ecd900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152600c60205260408082208290556001600160a01b038516825281208054849290610956908490611b59565b9091555050505050565b6000546001600160a01b0316331461098b5760405163b2e661d760e01b815260040160405180910390fd5b6001600160a01b0381166109cb576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546001600160a01b0390811690821603610a13576040517f0d7ba3a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080546040516001600160a01b03808516939216917f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed91a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b610a8e610c8f565b610ac4576040517f6247a84e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152600c60205260408120549003610b0c576040517f5dd9982e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610b1733610ca9565b905080600003610b53576040517fb8d485a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152600d602052604081208054839290610b72908490611b59565b90915550610bac90506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633836115dd565b60405181815233907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316907fa86305abc2db271df4609aa86a8d044bc11fb36939841bfdad6c1ab2b26e94719060200160405180910390a350565b6000546001600160a01b03163314610c3a5760405163b2e661d760e01b815260040160405180910390fd5b600f8390556010829055601181905560408051848152602081018490529081018290527f48a56cad4f4700b5cec54bb868120f657d71333d300cfbdd06d52c0920f21d039060600160405180910390a1505050565b6000600a54600754610ca19190611b59565b421015905090565b6000610cb3610c8f565b610cbf57506000919050565b6001600160a01b0382166000908152600c6020908152604080832054600d9092528220549091610cef8284611b6c565b9050600b5460001480610d1e5750600b54600a54600754610d109190611b59565b610d1a9190611b59565b4210155b15610d2b57949350505050565b6000600b54600a5460075442610d419190611b6c565b610d4b9190611b6c565b610d559086611b7f565b610d5f9190611b96565b905083811115610d6c5750825b610d768382611b6c565b9695505050505050565b6000546001600160a01b03163314610dab5760405163b2e661d760e01b815260040160405180910390fd5b600754421015610de7576040517fd3018d1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610e67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8b9190611bb8565b600e5490915081811115610ea25760009150610eaf565b610eac8183611b6c565b91505b60008211610ee9576040517fbbd8170800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f1d6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633846115dd565b5050565b6000546001600160a01b03163314610f4c5760405163b2e661d760e01b815260040160405180910390fd5b80600003610f86576040517f59e3bc8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03167f5a618a77896880d7865b0093eac54a86e9bad19c67a4870cf1bf46420c041d8782604051610fe191815260200190565b60405180910390a2600255565b6000546001600160a01b031633146110195760405163b2e661d760e01b815260040160405180910390fd5b600754421015611055576040517fd3018d1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b476000819003611091576040517fbbd8170800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604051600090339083908381818185875af1925050503d80600081146110d3576040519150601f19603f3d011682016040523d82523d6000602084013e6110d8565b606091505b5050905080610f1d576040517f53a7326b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60065442101561114f576040517f6f312cbd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600754421061118a576040517f477383f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b346000036111c4576040517f384dbe5a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600f5411801561122157506011546040805133602082015261121f92859285920160408051601f198184030181528282528051602091820120908301520160405160208183030381529060405280519060200120611656565b155b15611258576040517fa26e706500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006112633461159d565b90506004548110156112a1576040517f1fbaba3500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600554336000908152600c60205260409020546112bf908390611b59565b11156112f7576040517f6a93ecd900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60035481600e546113089190611b59565b1115611340576040517fc11132a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152600c60205260408120805483929061135f908490611b59565b9250508190555080600e60008282546113789190611b59565b909155505060405181815233906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016907ff9b4eb3e43eebbf559e9b96ceff1c786a7edab2938c7f5f80678197c2e0edba59060200160405180910390a3505050565b6000546001600160a01b0316331461140d5760405163b2e661d760e01b815260040160405180910390fd5b80600003611447576040517fe690acde00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006127106008548361145a9190611b7f565b6114649190611b96565b905080156114b5576009546114a8906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116913391168461166e565b6114b28183611b6c565b91505b6114ea6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308561166e565b81600360008282546114fc9190611b59565b90915550506003546040519081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016907fa3b7fca9670bb037363dfd4e1a7f841adac6df1f3ce5a23a57fedce69b400f1c9060200160405180910390a25050565b6000546001600160a01b031633146115915760405163b2e661d760e01b815260040160405180910390fd5b6001610f1d8282611c21565b6002546000906115cd7f000000000000000000000000000000000000000000000000000000000000000084611b7f565b6115d79190611b96565b92915050565b6040516001600160a01b0383811660248301526044820183905261165191859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506116ad565b505050565b600082611664868685611729565b1495945050505050565b6040516001600160a01b0384811660248301528381166044830152606482018390526116a79186918216906323b872dd9060840161160a565b50505050565b60006116c26001600160a01b0384168361176d565b905080516000141580156116e75750808060200190518101906116e59190611ce1565b155b15611651576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610844565b600081815b84811015611762576117588287878481811061174c5761174c611d03565b9050602002013561177b565b915060010161172e565b5090505b9392505050565b6060611766838360006117aa565b6000818310611797576000828152602084905260409020611766565b6000838152602083905260409020611766565b6060814710156117e8576040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152602401610844565b600080856001600160a01b031684866040516118049190611d19565b60006040518083038185875af1925050503d8060008114611841576040519150601f19603f3d011682016040523d82523d6000602084013e611846565b606091505b5091509150610d7686838360608261186657611861826118c6565b611766565b815115801561187d57506001600160a01b0384163b155b156118bf576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610844565b5080611766565b8051156118d65780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006020828403121561191a57600080fd5b81356001600160a01b038116811461176657600080fd5b60005b8381101561194c578181015183820152602001611934565b50506000910152565b6020815260008251806020840152611974816040850160208701611931565b601f01601f19169190910160400192915050565b60006020828403121561199a57600080fd5b5035919050565b6000806000606084860312156119b657600080fd5b505081359360208301359350604090920135919050565b600080602083850312156119e057600080fd5b823567ffffffffffffffff808211156119f857600080fd5b818501915085601f830112611a0c57600080fd5b813581811115611a1b57600080fd5b8660208260051b8501011115611a3057600080fd5b60209290920196919550909350505050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215611a6a57600080fd5b813567ffffffffffffffff80821115611a8257600080fd5b818401915084601f830112611a9657600080fd5b813581811115611aa857611aa8611a42565b604051601f8201601f19908116603f01168101908382118183101715611ad057611ad0611a42565b81604052828152876020848701011115611ae957600080fd5b826020860160208301376000928101602001929092525095945050505050565b600181811c90821680611b1d57607f821691505b602082108103611b3d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156115d7576115d7611b43565b818103818111156115d7576115d7611b43565b80820281158282048414176115d7576115d7611b43565b600082611bb357634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611bca57600080fd5b5051919050565b601f821115611651576000816000526020600020601f850160051c81016020861015611bfa5750805b601f850160051c820191505b81811015611c1957828155600101611c06565b505050505050565b815167ffffffffffffffff811115611c3b57611c3b611a42565b611c4f81611c498454611b09565b84611bd1565b602080601f831160018114611c845760008415611c6c5750858301515b600019600386901b1c1916600185901b178555611c19565b600085815260208120601f198616915b82811015611cb357888601518255948401946001909101908401611c94565b5085821015611cd15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215611cf357600080fd5b8151801515811461176657600080fd5b634e487b7160e01b600052603260045260246000fd5b60008251611d2b818460208701611931565b919091019291505056fea2646970667358221220719fbe9d6399073574d8257a9620f05f0a414729fea970933747a995c1641e3564736f6c63430008170033a26469706673582212205f22d2fb8ab96eca41b5665de3837693ae9cfe52ba52bc1a73ca7d2b45ecf75064736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}